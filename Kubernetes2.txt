Kubernetes:

K8s is an open source orchestration platform
K8S used to manage containers
K8S developed in google & donated to CNCF
K8S provides a framework for managing the complex task of deploying, scaling, and operating applications in containers.

Advantages:
* Container Orchestration
* Scalability
* Self-Healing
* Load Balancing

K8S Architecture:
--------------------
* K8S works based on cluser architectute. Cluster means group of servers

control plane is also called as  Master node is managing everthing in k8s. It contain below components:
*API Server
*Scheduler
*Controller-Manager
*etcd

Control Plane/ Master Node
worker node - POD, Container, DOCKER, Kublet , Kube-Proxy
Kubectl - software which used to communicate to K8S

To communicate with K8S control plane, we have 2 optiosn. web dashboard or Kubectl

POD is nothing but a process. Inside the POD, we have multiple containers.
POD Represents running instance of application

In K8S, project will be executed as a POD. inside POS containers

kubectl-to deploy 

K8S Architecture components:

* API Server will take our request(Deploy. increse, decrese, or delete.. etc) an store our request into etcd.
* etcd - request info maintained by etcd.
* Scheduler - schedule the tasks which is pending and schedule taks in worker nodes. It will get available worker node info by using    kubelet.
* Kubelet - is called as worker node agent.
* Kube-Proxy - it provides network for cluster communication.
* Controler-Manager will monitor all K8S resources functionality

K8S Cluster Setup:
K8S Cluster we can setup in multiple way - 
* Self Managed K8S Cluster
	- Mini Kube (Single Node Cluster)
	- Kubeadm (Multi Node Cluster)
* Managed K8S Cluster
	- AWS EKS (Elastic K8S Service)
	- Azure AKS
	- GCP GKE
	- IBM IKE
	
POD - is a smallest building block that we deploy in K8S cluster.
	App will be deployed in K8S cluster as a POD only
	For one app, we can create multiple POD replicas fo high avaialability.
	For every POD one IP addres will be generated
	If POS got damaged/crashed then K8S will replace it(self-healing)
	To create PODs we wil use MANIFEST YML Files
	Note: By default PODs are accessible only with in the cluster(We can't access outside)
	To expose PODs for outside access we need to use K8S services concept
	
What is service in K8S?
	K8S service is used to expose PODs.
	we have 3  types of services available:
		- cluster IP(To access with in cluster)
		- Node Port (To access PODs using NODE public IP)
		- Load Balancer (To distribute the traffic to POD replicas)

K8S Manifest YML Syntax:

apiVersion: apps/v1
Kind: Deployment
metadata:
	name: javawebappdeployment
spec:
	replicas: 2
	strategy: 
		type: RollingUpdate
	selector:
		matchLabels:
		app: javawebapp
	template:
		metadata:
			name: javawebapppod
			lablels:
				app: javawebapp
	spec:
		contaiers:
			-name: javawebappcontainer
			images: pavan/javawebapp
			ports:
			- containerPort: 8080
			
...
apiVersion:v1
kind: Service
metadata:
	name: javawebappsvc
spec:
	type: LoadBalancer
	selector:
		app: javawebapp
	ports:
	- port: 80
		containerPort: 8080
		
$ kubctl get pods #check PODs
$ kubctl get pods -o wide #check PODs running in which worker node
$ kubctl get svc #check services created
$ kubctl get deployment #check deployments created
$ kubctl apply -f <yml> # Execute K8S manifest yml
$ kubctl get all # get info all resources
$ kubctl delete pod <pod_id>
$ kubctl logs <pod_name>
$ kubctl delete all --all
--------------------------------------------------------------------------------------

Namespace is just like VPC, Project resources are provision inside namespaces. If you dnt give any namespace, the default namespace can be use.

apiVersion: v1
kind: Pod
metadata:
	name: simple-pod
	namespace: roboshop
spec:
  containers:
	- name: nginx-simple
	image: nginx:1.14.2
	ports:
	- containerPort: 80
